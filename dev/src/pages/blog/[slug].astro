---
import format from "date-fns/format"
import sanityClient from "lib/sanityClient"
import { article, buildUrl, twitterLink } from "lib/utils"
import BaseLayout from "layouts/BaseLayout.astro"
import PortableText from "components/PortableText.tsx"
import { components } from "components/portableTextComponents"
import { postsQuery } from "lib/queries"

export async function getStaticPaths() {
  const data = await sanityClient.fetch(postsQuery).then(response => response)
  return data.posts.map(post => {
    return {
      params: { slug: post.slug },
      props: { post }
    }
  })
}
const { slug } = Astro.request.params
const { post } = Astro.props
---
<BaseLayout
  title={post.title}
  seoDescription={post.seoDescription}
  keywords={post.seoKeywords}
  seoTitle={post.seoTitle}
  slug={post.slug}
  twitterHandle={post.author.twitterHandle}
>
  <div>
    {post.title && <h1>{post.title}</h1>}
    {post.publishedAt && <p>
      published on: {format(new Date(post.publishedAt), "eeee, do MMMM yyyy")}
    </p>}
    {post.author && <p>{"by: "}
      <a href={buildUrl(post.author._type, post.author.slug)}>
        {post.author.name}
      </a>
    </p>}
    {post.categories && <ul>
      {"in: "}{post.categories.map(category =>
        <li>
          <a href={buildUrl(category._type, category.slug)}>
            {category.title}
          </a>
        </li>
      )}
    </ul>}
    {post.body && <PortableText body={post.body} components={components} />}
    {post.author && <p>
      {post.author.twitterHandle
        ? <a
            href={twitterLink(post.author.twitterHandle)}
            target="_blank"
            rel="noreferrer"
          >{post.author.name}</a> : {post.author.name}}{" is "}
      {article(post.author.occupation)}{" "}{post.author.occupation}
    </p>}
  </div>
</BaseLayout>

<style lang="scss">
li {
  display: inline;
  &:not(:last-child)::after {
    content: ', ';
  }
}
</style>

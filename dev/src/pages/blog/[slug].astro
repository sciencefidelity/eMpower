---
import { Maybe } from "astro-control"
import format from "date-fns/format"
import { PortableText } from "@portabletext/react"
import sanityClient from "lib/sanityClient"
import { article, buildUrl, twitterLink } from "lib/utils"
import BaseLayout from "layouts/BaseLayout.astro"
import CommentForm from "components/CommentForm.svelte"
import { components } from "components/PortableTextComponents"
import { postsQuery } from "lib/queries"
import { Navigation, Settings, Post } from "lib/interfaces"

export async function getStaticPaths() {
  const data: {
    navigation: Navigation
    settings: Settings
    posts: Post[]
  } = await sanityClient.fetch(postsQuery).then(response => response)
  const { navigation, settings } = data
  return data.posts.map(post => {
    return {
      params: { slug: post.slug },
      props: { navigation, settings, post }
    }
  })
}
// const { slug } = Astro.params
const { navigation, settings, post } = Astro.props as {
  navigation: Navigation
  settings: Settings
  post: Post
}
console.log(post.settings.authors[0])
---
<BaseLayout {navigation} {settings}>
  <section>
    <Maybe as="h1" class="title text-white serif bold">{post.title}</Maybe>
    <Maybe as="p">
      published on:
      {format(new Date(post.settings.publishedAt), "eeee, do MMMM yyyy")}
    </Maybe>
    <Maybe as="p">
      {"by: "}
      {post.settings.authors.map(author =>
        <a href={buildUrl(author._type, author.slug)}>{author.name}</a>
      )}
    </Maybe>
    <Maybe as="ul">
      {"in: "}{post.settings.tags.map(tag =>
        <li>
          <a href={buildUrl(tag._type, tag.slug)}>
            {tag.title}
          </a>
        </li>
      )}
    </Maybe>
    <div class="body">
      {post.body && <PortableText value={post.body} components={components} />}
      {post.settings.authors && post.settings.authors.map(author =>
        <p>
          {author.name}
          {" is "}
          {article(author.occupation)}{" "}
          {author.occupation}
        </p>
      )}
    </div>
    <CommentForm client:idle id={post._id} />
    {post.comments && post.comments.map(comment =>
      <p>{comment.message}</p>
      <p>by {comment.name} on {
        format(new Date(comment._createdAt), "eeee, do MMMM yyyy")
      }</p>
    )}
  </section>
</BaseLayout>

<style lang="scss">
li {
  display: inline;
  &:not(:last-child)::after {
    content: ', ';
  }
}

.title {
  margin-bottom: 4rem;
  font-size: 7rem;
}

.body {
  margin-top: 7rem;
}
</style>
